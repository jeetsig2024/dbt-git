{"creation_time": "2024-05-15T11:34:09+00:00", "days_back": 7, "models": {"model.dbt_practise.my_first_dbt_model": {"name": "my_first_dbt_model", "unique_id": "model.dbt_practise.my_first_dbt_model", "owners": [], "tags": [], "package_name": "dbt_practise", "description": "A starter dbt model", "full_path": "models/example/my_first_dbt_model.sql", "meta": {}, "materialization": "table", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "first_model", "patch_path": "dbt_practise://models/example/schema.yml", "model_name": "my_first_dbt_model", "normalized_full_path": "dbt_practise/models/example/my_first_dbt_model.sql", "fqn": "jeet_db.jeet_db_schema.first_model", "artifact_type": "model"}, "model.dbt_practise.playing_with_tests": {"name": "playing_with_tests", "unique_id": "model.dbt_practise.playing_with_tests", "owners": [], "tags": [], "package_name": "dbt_practise", "description": "", "full_path": "models/example/playing_with_tests.sql", "meta": {}, "materialization": "table", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "playing_with_tests", "patch_path": "dbt_practise://models/example/schema.yml", "model_name": "playing_with_tests", "normalized_full_path": "dbt_practise/models/example/playing_with_tests.sql", "fqn": "jeet_db.jeet_db_schema.playing_with_tests", "artifact_type": "model"}, "model.dbt_practise.my_second_dbt_model": {"name": "my_second_dbt_model", "unique_id": "model.dbt_practise.my_second_dbt_model", "owners": [], "tags": [], "package_name": "dbt_practise", "description": "A starter dbt model", "full_path": "models/example/my_second_dbt_model.sql", "meta": {}, "materialization": "view", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "my_second_dbt_model", "patch_path": "dbt_practise://models/example/schema.yml", "model_name": "my_second_dbt_model", "normalized_full_path": "dbt_practise/models/example/my_second_dbt_model.sql", "fqn": "jeet_db.jeet_db_schema.my_second_dbt_model", "artifact_type": "model"}, "model.dbt_practise.dates": {"name": "dates", "unique_id": "model.dbt_practise.dates", "owners": [], "tags": [], "package_name": "dbt_practise", "description": "A date test", "full_path": "models/example/dates.sql", "meta": {}, "materialization": "incremental", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "dates", "patch_path": "dbt_practise://models/example/schema.yml", "model_name": "dates", "normalized_full_path": "dbt_practise/models/example/dates.sql", "fqn": "jeet_db.jeet_db_schema.dates", "artifact_type": "model"}, "model.dbt_practise.incremental_time": {"name": "incremental_time", "unique_id": "model.dbt_practise.incremental_time", "owners": [], "tags": [], "package_name": "dbt_practise", "description": "time", "full_path": "models/example/incremental_time.sql", "meta": {}, "materialization": "incremental", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "incremental_time", "patch_path": "dbt_practise://models/example/schema.yml", "model_name": "incremental_time", "normalized_full_path": "dbt_practise/models/example/incremental_time.sql", "fqn": "jeet_db.jeet_db_schema.incremental_time", "artifact_type": "model"}, "model.dbt_practise.python_val": {"name": "python_val", "unique_id": "model.dbt_practise.python_val", "owners": [], "tags": [], "package_name": "dbt_practise", "description": "time", "full_path": "models/example/python_val.py", "meta": {}, "materialization": "table", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "python_val", "patch_path": "dbt_practise://models/example/schema.yml", "model_name": "python_val", "normalized_full_path": "dbt_practise/models/example/python_val.py", "fqn": "jeet_db.jeet_db_schema.python_val", "artifact_type": "model"}}, "groups": {"dbt": {"dbt_practise": {"models": {"example": {"__files__": [{"node_id": "model.dbt_practise.my_first_dbt_model", "resource_type": "model"}, {"node_id": "model.dbt_practise.playing_with_tests", "resource_type": "model"}, {"node_id": "model.dbt_practise.my_second_dbt_model", "resource_type": "model"}, {"node_id": "model.dbt_practise.dates", "resource_type": "model"}, {"node_id": "model.dbt_practise.incremental_time", "resource_type": "model"}, {"node_id": "model.dbt_practise.python_val", "resource_type": "model"}]}}, "tests": {"__files__": [{"node_id": "test.dbt_practise.assert_totalsum", "resource_type": "test"}]}}}, "tags": {"No tags": [{"node_id": "model.dbt_practise.my_first_dbt_model", "resource_type": "model"}, {"node_id": "model.dbt_practise.playing_with_tests", "resource_type": "model"}, {"node_id": "model.dbt_practise.my_second_dbt_model", "resource_type": "model"}, {"node_id": "model.dbt_practise.dates", "resource_type": "model"}, {"node_id": "model.dbt_practise.incremental_time", "resource_type": "model"}, {"node_id": "model.dbt_practise.python_val", "resource_type": "model"}, {"node_id": "test.dbt_practise.assert_totalsum", "resource_type": "test"}]}, "owners": {"No owners": [{"node_id": "model.dbt_practise.my_first_dbt_model", "resource_type": "model"}, {"node_id": "model.dbt_practise.playing_with_tests", "resource_type": "model"}, {"node_id": "model.dbt_practise.my_second_dbt_model", "resource_type": "model"}, {"node_id": "model.dbt_practise.dates", "resource_type": "model"}, {"node_id": "model.dbt_practise.incremental_time", "resource_type": "model"}, {"node_id": "model.dbt_practise.python_val", "resource_type": "model"}, {"node_id": "test.dbt_practise.assert_totalsum", "resource_type": "test"}]}}, "invocation": {"invocation_id": null, "detected_at": null, "command": null, "selected": null, "full_refresh": null, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}, "test_results": {"model.dbt_practise.playing_with_tests": [{"metadata": {"test_unique_id": "test.dbt_practise.accepted_values_playing_with_tests_c_mktsegment__BUILDING__AUTOMOBILE__MACHINERY__HOUSEHOLD__FURNITURE.22353b7cb3", "elementary_unique_id": "test.dbt_practise.accepted_values_playing_with_tests_c_mktsegment__BUILDING__AUTOMOBILE__MACHINERY__HOUSEHOLD__FURNITURE.22353b7cb3.c_mktsegment.generic", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "playing_with_tests", "column_name": "c_mktsegment", "test_name": "accepted_values", "test_display_name": "Accepted Values", "original_path": "models/example/schema.yml", "latest_run_time": "2024-05-15T17:01:58+05:30", "latest_run_time_utc": "2024-05-15T11:31:58+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_practise.playing_with_tests", "table_unique_id": "jeet_db.jeet_db_schema.playing_with_tests", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        c_mktsegment as value_field,\n        count(*) as n_records\n\n    from JEET_DB.JEET_DB_SCHEMA.playing_with_tests\n    group by c_mktsegment\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'BUILDING','AUTOMOBILE','MACHINERY','HOUSEHOLD','FURNITURE'\n)", "test_params": {"values": ["BUILDING", "AUTOMOBILE", "MACHINERY", "HOUSEHOLD", "FURNITURE"], "column_name": "c_mktsegment", "model": "{{ get_where_subquery(ref('playing_with_tests')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        c_mktsegment as value_field,\n        count(*) as n_records\n\n    from JEET_DB.JEET_DB_SCHEMA.playing_with_tests\n    group by c_mktsegment\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'BUILDING','AUTOMOBILE','MACHINERY','HOUSEHOLD','FURNITURE'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["BUILDING", "AUTOMOBILE", "MACHINERY", "HOUSEHOLD", "FURNITURE"], "column_name": "c_mktsegment", "model": "{{ get_where_subquery(ref('playing_with_tests')) }}"}}, "test_tags": [], "normalized_full_path": "dbt_practise/models/example/schema.yml"}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_practise.assert_totalsum", "elementary_unique_id": "test.dbt_practise.assert_totalsum.None.singular", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "playing_with_tests", "column_name": null, "test_name": "assert_totalsum", "test_display_name": "Assert Totalsum", "original_path": "tests/assert_totalsum.sql", "latest_run_time": "2024-05-15T17:02:00+05:30", "latest_run_time_utc": "2024-05-15T11:32:00+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_practise.playing_with_tests", "table_unique_id": "jeet_db.jeet_db_schema.playing_with_tests", "test_type": "dbt_test", "test_sub_type": "singular", "test_query": "select sum(c_acctbal) from \nJEET_DB.JEET_DB_SCHEMA.playing_with_tests\nhaving sum(c_acctbal) < 100000000", "test_params": {}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select sum(c_acctbal) from \nJEET_DB.JEET_DB_SCHEMA.playing_with_tests\nhaving sum(c_acctbal) < 100000000"}, "configuration": {"test_name": "assert_totalsum", "test_params": {}}, "test_tags": [], "normalized_full_path": "dbt_practise/tests/assert_totalsum.sql"}, "test_results": {"display_name": "assert_totalsum", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_practise.unique_playing_with_tests_c_custkey.b4337ce550", "elementary_unique_id": "test.dbt_practise.unique_playing_with_tests_c_custkey.b4337ce550.c_custkey.generic", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "playing_with_tests", "column_name": "c_custkey", "test_name": "unique", "test_display_name": "Unique", "original_path": "models/example/schema.yml", "latest_run_time": "2024-05-15T17:02:10+05:30", "latest_run_time_utc": "2024-05-15T11:32:10+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_practise.playing_with_tests", "table_unique_id": "jeet_db.jeet_db_schema.playing_with_tests", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    c_custkey as unique_field,\n    count(*) as n_records\n\nfrom JEET_DB.JEET_DB_SCHEMA.playing_with_tests\nwhere c_custkey is not null\ngroup by c_custkey\nhaving count(*) > 1", "test_params": {"column_name": "c_custkey", "model": "{{ get_where_subquery(ref('playing_with_tests')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    c_custkey as unique_field,\n    count(*) as n_records\n\nfrom JEET_DB.JEET_DB_SCHEMA.playing_with_tests\nwhere c_custkey is not null\ngroup by c_custkey\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "c_custkey", "model": "{{ get_where_subquery(ref('playing_with_tests')) }}"}}, "test_tags": [], "normalized_full_path": "dbt_practise/models/example/schema.yml"}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "test.dbt_practise.assert_totalsum": [{"metadata": {"test_unique_id": "test.dbt_practise.assert_totalsum", "elementary_unique_id": "test.dbt_practise.assert_totalsum.None.singular", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "playing_with_tests", "column_name": null, "test_name": "assert_totalsum", "test_display_name": "Assert Totalsum", "original_path": "tests/assert_totalsum.sql", "latest_run_time": "2024-05-15T17:02:00+05:30", "latest_run_time_utc": "2024-05-15T11:32:00+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_practise.playing_with_tests", "table_unique_id": "jeet_db.jeet_db_schema.playing_with_tests", "test_type": "dbt_test", "test_sub_type": "singular", "test_query": "select sum(c_acctbal) from \nJEET_DB.JEET_DB_SCHEMA.playing_with_tests\nhaving sum(c_acctbal) < 100000000", "test_params": {}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select sum(c_acctbal) from \nJEET_DB.JEET_DB_SCHEMA.playing_with_tests\nhaving sum(c_acctbal) < 100000000"}, "configuration": {"test_name": "assert_totalsum", "test_params": {}}, "test_tags": [], "normalized_full_path": "dbt_practise/tests/assert_totalsum.sql"}, "test_results": {"display_name": "assert_totalsum", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "model.dbt_practise.my_second_dbt_model": [{"metadata": {"test_unique_id": "test.dbt_practise.not_null_my_second_dbt_model_id.151b76d778", "elementary_unique_id": "test.dbt_practise.not_null_my_second_dbt_model_id.151b76d778.id.generic", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "my_second_dbt_model", "column_name": "id", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/example/schema.yml", "latest_run_time": "2024-05-15T17:02:04+05:30", "latest_run_time_utc": "2024-05-15T11:32:04+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_practise.my_second_dbt_model", "table_unique_id": "jeet_db.jeet_db_schema.my_second_dbt_model", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select id\nfrom JEET_DB.JEET_DB_SCHEMA.my_second_dbt_model\nwhere id is null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select id\nfrom JEET_DB.JEET_DB_SCHEMA.my_second_dbt_model\nwhere id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}}, "test_tags": [], "normalized_full_path": "dbt_practise/models/example/schema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_practise.unique_my_second_dbt_model_id.57a0f8c493", "elementary_unique_id": "test.dbt_practise.unique_my_second_dbt_model_id.57a0f8c493.id.generic", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "my_second_dbt_model", "column_name": "id", "test_name": "unique", "test_display_name": "Unique", "original_path": "models/example/schema.yml", "latest_run_time": "2024-05-15T17:02:08+05:30", "latest_run_time_utc": "2024-05-15T11:32:08+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_practise.my_second_dbt_model", "table_unique_id": "jeet_db.jeet_db_schema.my_second_dbt_model", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom JEET_DB.JEET_DB_SCHEMA.my_second_dbt_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom JEET_DB.JEET_DB_SCHEMA.my_second_dbt_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}}, "test_tags": [], "normalized_full_path": "dbt_practise/models/example/schema.yml"}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "model.dbt_practise.my_first_dbt_model": [{"metadata": {"test_unique_id": "test.dbt_practise.not_null_my_first_dbt_model_id.5fb22c2710", "elementary_unique_id": "test.dbt_practise.not_null_my_first_dbt_model_id.5fb22c2710.id.generic", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "first_model", "column_name": "id", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/example/schema.yml", "latest_run_time": "2024-05-15T17:02:02+05:30", "latest_run_time_utc": "2024-05-15T11:32:02+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_practise.my_first_dbt_model", "table_unique_id": "jeet_db.jeet_db_schema.first_model", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select id\nfrom JEET_DB.JEET_DB_SCHEMA.first_model\nwhere id is null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select id\nfrom JEET_DB.JEET_DB_SCHEMA.first_model\nwhere id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}}, "test_tags": [], "normalized_full_path": "dbt_practise/models/example/schema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_practise.unique_my_first_dbt_model_id.16e066b321", "elementary_unique_id": "test.dbt_practise.unique_my_first_dbt_model_id.16e066b321.id.generic", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "first_model", "column_name": "id", "test_name": "unique", "test_display_name": "Unique", "original_path": "models/example/schema.yml", "latest_run_time": "2024-05-15T17:02:06+05:30", "latest_run_time_utc": "2024-05-15T11:32:06+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_practise.my_first_dbt_model", "table_unique_id": "jeet_db.jeet_db_schema.first_model", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom JEET_DB.JEET_DB_SCHEMA.first_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom JEET_DB.JEET_DB_SCHEMA.first_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}}, "test_tags": [], "normalized_full_path": "dbt_practise/models/example/schema.yml"}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}]}, "test_results_totals": {"model.dbt_practise.playing_with_tests": {"errors": 0, "warnings": 0, "passed": 3, "failures": 0}, "test.dbt_practise.assert_totalsum": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.dbt_practise.my_second_dbt_model": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.dbt_practise.my_first_dbt_model": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}}, "test_runs": {"model.dbt_practise.playing_with_tests": [{"metadata": {"test_unique_id": "test.dbt_practise.accepted_values_playing_with_tests_c_mktsegment__BUILDING__AUTOMOBILE__MACHINERY__HOUSEHOLD__FURNITURE.22353b7cb3", "elementary_unique_id": "test.dbt_practise.accepted_values_playing_with_tests_c_mktsegment__BUILDING__AUTOMOBILE__MACHINERY__HOUSEHOLD__FURNITURE.22353b7cb3.c_mktsegment.generic", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "playing_with_tests", "column_name": "c_mktsegment", "test_name": "accepted_values", "test_display_name": "Accepted Values", "original_path": "models/example/schema.yml", "latest_run_time": "2024-05-15T17:01:58+05:30", "latest_run_time_utc": "2024-05-15T11:31:58+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_practise.playing_with_tests", "table_unique_id": "jeet_db.jeet_db_schema.playing_with_tests", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        c_mktsegment as value_field,\n        count(*) as n_records\n\n    from JEET_DB.JEET_DB_SCHEMA.playing_with_tests\n    group by c_mktsegment\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'BUILDING','AUTOMOBILE','MACHINERY','HOUSEHOLD','FURNITURE'\n)", "test_params": {"values": ["BUILDING", "AUTOMOBILE", "MACHINERY", "HOUSEHOLD", "FURNITURE"], "column_name": "c_mktsegment", "model": "{{ get_where_subquery(ref('playing_with_tests')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        c_mktsegment as value_field,\n        count(*) as n_records\n\n    from JEET_DB.JEET_DB_SCHEMA.playing_with_tests\n    group by c_mktsegment\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'BUILDING','AUTOMOBILE','MACHINERY','HOUSEHOLD','FURNITURE'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["BUILDING", "AUTOMOBILE", "MACHINERY", "HOUSEHOLD", "FURNITURE"], "column_name": "c_mktsegment", "model": "{{ get_where_subquery(ref('playing_with_tests')) }}"}}, "test_tags": [], "normalized_full_path": "dbt_practise/models/example/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-15T11:26:34+00:00", "id": "070933cd-9268-49cc-91e7-9cf7fb7ea6ef", "status": "pass", "execution_time": 2.2787342071533203}, {"affected_rows": null, "time_utc": "2024-05-15T11:31:58+00:00", "id": "d0e22b7e-b7b4-43e0-9866-9097ef9cfdb7", "status": "pass", "execution_time": 2.124116897583008}], "description": "There were no failures, no errors and no warnings on the last 2 test runs."}, "median_exec_time": 2.201425552368164, "last_exec_time": 2.124116897583008}, {"metadata": {"test_unique_id": "test.dbt_practise.assert_totalsum", "elementary_unique_id": "test.dbt_practise.assert_totalsum.None.singular", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "playing_with_tests", "column_name": null, "test_name": "assert_totalsum", "test_display_name": "Assert Totalsum", "original_path": "tests/assert_totalsum.sql", "latest_run_time": "2024-05-15T17:02:00+05:30", "latest_run_time_utc": "2024-05-15T11:32:00+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_practise.playing_with_tests", "table_unique_id": "jeet_db.jeet_db_schema.playing_with_tests", "test_type": "dbt_test", "test_sub_type": "singular", "test_query": "select sum(c_acctbal) from \nJEET_DB.JEET_DB_SCHEMA.playing_with_tests\nhaving sum(c_acctbal) < 100000000", "test_params": {}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select sum(c_acctbal) from \nJEET_DB.JEET_DB_SCHEMA.playing_with_tests\nhaving sum(c_acctbal) < 100000000"}, "configuration": {"test_name": "assert_totalsum", "test_params": {}}, "test_tags": [], "normalized_full_path": "dbt_practise/tests/assert_totalsum.sql"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-15T11:26:36+00:00", "id": "070933cd-9268-49cc-91e7-9cf7fb7ea6ef", "status": "pass", "execution_time": 2.146152973175049}, {"affected_rows": null, "time_utc": "2024-05-15T11:32:00+00:00", "id": "d0e22b7e-b7b4-43e0-9866-9097ef9cfdb7", "status": "pass", "execution_time": 1.9253101348876953}], "description": "There were no failures, no errors and no warnings on the last 2 test runs."}, "median_exec_time": 2.035731554031372, "last_exec_time": 1.9253101348876953}, {"metadata": {"test_unique_id": "test.dbt_practise.unique_playing_with_tests_c_custkey.b4337ce550", "elementary_unique_id": "test.dbt_practise.unique_playing_with_tests_c_custkey.b4337ce550.c_custkey.generic", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "playing_with_tests", "column_name": "c_custkey", "test_name": "unique", "test_display_name": "Unique", "original_path": "models/example/schema.yml", "latest_run_time": "2024-05-15T17:02:10+05:30", "latest_run_time_utc": "2024-05-15T11:32:10+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_practise.playing_with_tests", "table_unique_id": "jeet_db.jeet_db_schema.playing_with_tests", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    c_custkey as unique_field,\n    count(*) as n_records\n\nfrom JEET_DB.JEET_DB_SCHEMA.playing_with_tests\nwhere c_custkey is not null\ngroup by c_custkey\nhaving count(*) > 1", "test_params": {"column_name": "c_custkey", "model": "{{ get_where_subquery(ref('playing_with_tests')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    c_custkey as unique_field,\n    count(*) as n_records\n\nfrom JEET_DB.JEET_DB_SCHEMA.playing_with_tests\nwhere c_custkey is not null\ngroup by c_custkey\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "c_custkey", "model": "{{ get_where_subquery(ref('playing_with_tests')) }}"}}, "test_tags": [], "normalized_full_path": "dbt_practise/models/example/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-15T11:26:44+00:00", "id": "070933cd-9268-49cc-91e7-9cf7fb7ea6ef", "status": "pass", "execution_time": 2.1056950092315674}, {"affected_rows": null, "time_utc": "2024-05-15T11:32:10+00:00", "id": "d0e22b7e-b7b4-43e0-9866-9097ef9cfdb7", "status": "pass", "execution_time": 1.9662928581237793}], "description": "There were no failures, no errors and no warnings on the last 2 test runs."}, "median_exec_time": 2.0359939336776733, "last_exec_time": 1.9662928581237793}], "test.dbt_practise.assert_totalsum": [{"metadata": {"test_unique_id": "test.dbt_practise.assert_totalsum", "elementary_unique_id": "test.dbt_practise.assert_totalsum.None.singular", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "playing_with_tests", "column_name": null, "test_name": "assert_totalsum", "test_display_name": "Assert Totalsum", "original_path": "tests/assert_totalsum.sql", "latest_run_time": "2024-05-15T17:02:00+05:30", "latest_run_time_utc": "2024-05-15T11:32:00+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_practise.playing_with_tests", "table_unique_id": "jeet_db.jeet_db_schema.playing_with_tests", "test_type": "dbt_test", "test_sub_type": "singular", "test_query": "select sum(c_acctbal) from \nJEET_DB.JEET_DB_SCHEMA.playing_with_tests\nhaving sum(c_acctbal) < 100000000", "test_params": {}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select sum(c_acctbal) from \nJEET_DB.JEET_DB_SCHEMA.playing_with_tests\nhaving sum(c_acctbal) < 100000000"}, "configuration": {"test_name": "assert_totalsum", "test_params": {}}, "test_tags": [], "normalized_full_path": "dbt_practise/tests/assert_totalsum.sql"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-15T11:26:36+00:00", "id": "070933cd-9268-49cc-91e7-9cf7fb7ea6ef", "status": "pass", "execution_time": 2.146152973175049}, {"affected_rows": null, "time_utc": "2024-05-15T11:32:00+00:00", "id": "d0e22b7e-b7b4-43e0-9866-9097ef9cfdb7", "status": "pass", "execution_time": 1.9253101348876953}], "description": "There were no failures, no errors and no warnings on the last 2 test runs."}, "median_exec_time": 2.035731554031372, "last_exec_time": 1.9253101348876953}], "model.dbt_practise.my_second_dbt_model": [{"metadata": {"test_unique_id": "test.dbt_practise.not_null_my_second_dbt_model_id.151b76d778", "elementary_unique_id": "test.dbt_practise.not_null_my_second_dbt_model_id.151b76d778.id.generic", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "my_second_dbt_model", "column_name": "id", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/example/schema.yml", "latest_run_time": "2024-05-15T17:02:04+05:30", "latest_run_time_utc": "2024-05-15T11:32:04+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_practise.my_second_dbt_model", "table_unique_id": "jeet_db.jeet_db_schema.my_second_dbt_model", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select id\nfrom JEET_DB.JEET_DB_SCHEMA.my_second_dbt_model\nwhere id is null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select id\nfrom JEET_DB.JEET_DB_SCHEMA.my_second_dbt_model\nwhere id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}}, "test_tags": [], "normalized_full_path": "dbt_practise/models/example/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-15T11:26:38+00:00", "id": "070933cd-9268-49cc-91e7-9cf7fb7ea6ef", "status": "pass", "execution_time": 2.1454718112945557}, {"affected_rows": null, "time_utc": "2024-05-15T11:32:04+00:00", "id": "d0e22b7e-b7b4-43e0-9866-9097ef9cfdb7", "status": "pass", "execution_time": 1.9563713073730469}], "description": "There were no failures, no errors and no warnings on the last 2 test runs."}, "median_exec_time": 2.0509215593338013, "last_exec_time": 1.9563713073730469}, {"metadata": {"test_unique_id": "test.dbt_practise.unique_my_second_dbt_model_id.57a0f8c493", "elementary_unique_id": "test.dbt_practise.unique_my_second_dbt_model_id.57a0f8c493.id.generic", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "my_second_dbt_model", "column_name": "id", "test_name": "unique", "test_display_name": "Unique", "original_path": "models/example/schema.yml", "latest_run_time": "2024-05-15T17:02:08+05:30", "latest_run_time_utc": "2024-05-15T11:32:08+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_practise.my_second_dbt_model", "table_unique_id": "jeet_db.jeet_db_schema.my_second_dbt_model", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom JEET_DB.JEET_DB_SCHEMA.my_second_dbt_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom JEET_DB.JEET_DB_SCHEMA.my_second_dbt_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}}, "test_tags": [], "normalized_full_path": "dbt_practise/models/example/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-15T11:26:42+00:00", "id": "070933cd-9268-49cc-91e7-9cf7fb7ea6ef", "status": "pass", "execution_time": 2.0884182453155518}, {"affected_rows": null, "time_utc": "2024-05-15T11:32:08+00:00", "id": "d0e22b7e-b7b4-43e0-9866-9097ef9cfdb7", "status": "pass", "execution_time": 2.1087920665740967}], "description": "There were no failures, no errors and no warnings on the last 2 test runs."}, "median_exec_time": 2.098605155944824, "last_exec_time": 2.1087920665740967}], "model.dbt_practise.my_first_dbt_model": [{"metadata": {"test_unique_id": "test.dbt_practise.not_null_my_first_dbt_model_id.5fb22c2710", "elementary_unique_id": "test.dbt_practise.not_null_my_first_dbt_model_id.5fb22c2710.id.generic", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "first_model", "column_name": "id", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/example/schema.yml", "latest_run_time": "2024-05-15T17:02:02+05:30", "latest_run_time_utc": "2024-05-15T11:32:02+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_practise.my_first_dbt_model", "table_unique_id": "jeet_db.jeet_db_schema.first_model", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select id\nfrom JEET_DB.JEET_DB_SCHEMA.first_model\nwhere id is null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select id\nfrom JEET_DB.JEET_DB_SCHEMA.first_model\nwhere id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}}, "test_tags": [], "normalized_full_path": "dbt_practise/models/example/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-15T11:32:02+00:00", "id": "d0e22b7e-b7b4-43e0-9866-9097ef9cfdb7", "status": "pass", "execution_time": 2.059311866760254}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}, "median_exec_time": 2.059311866760254, "last_exec_time": 2.059311866760254}, {"metadata": {"test_unique_id": "test.dbt_practise.unique_my_first_dbt_model_id.16e066b321", "elementary_unique_id": "test.dbt_practise.unique_my_first_dbt_model_id.16e066b321.id.generic", "database_name": "JEET_DB", "schema_name": "JEET_DB_SCHEMA", "table_name": "first_model", "column_name": "id", "test_name": "unique", "test_display_name": "Unique", "original_path": "models/example/schema.yml", "latest_run_time": "2024-05-15T17:02:06+05:30", "latest_run_time_utc": "2024-05-15T11:32:06+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_practise.my_first_dbt_model", "table_unique_id": "jeet_db.jeet_db_schema.first_model", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom JEET_DB.JEET_DB_SCHEMA.first_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom JEET_DB.JEET_DB_SCHEMA.first_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}}, "test_tags": [], "normalized_full_path": "dbt_practise/models/example/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-15T11:26:40+00:00", "id": "070933cd-9268-49cc-91e7-9cf7fb7ea6ef", "status": "pass", "execution_time": 2.251188039779663}, {"affected_rows": null, "time_utc": "2024-05-15T11:32:06+00:00", "id": "d0e22b7e-b7b4-43e0-9866-9097ef9cfdb7", "status": "pass", "execution_time": 1.9451708793640137}], "description": "There were no failures, no errors and no warnings on the last 2 test runs."}, "median_exec_time": 2.0981794595718384, "last_exec_time": 1.9451708793640137}]}, "test_runs_totals": {"model.dbt_practise.playing_with_tests": {"errors": 0, "warnings": 0, "passed": 6, "failures": 0}, "test.dbt_practise.assert_totalsum": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.dbt_practise.my_second_dbt_model": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "model.dbt_practise.my_first_dbt_model": {"errors": 0, "warnings": 0, "passed": 3, "failures": 0}}, "coverages": {"model.dbt_practise.playing_with_tests": {"table_tests": 1, "column_tests": 2}, "model.dbt_practise.my_first_dbt_model": {"table_tests": 0, "column_tests": 2}, "model.dbt_practise.my_second_dbt_model": {"table_tests": 0, "column_tests": 2}}, "model_runs": [{"unique_id": "model.dbt_practise.dates", "schema": "JEET_DB_SCHEMA", "name": "dates", "status": "success", "last_exec_time": 6.6, "median_exec_time": 7.3, "compiled_code": "\n\nselect * from SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.DATE_DIM\nwhere d_date <= current_date\n\n\n   and d_date>=(select max(d_date) from JEET_DB.JEET_DB_SCHEMA.dates)\n", "last_generated_at": "2024-05-15T11:23:21+00:00", "exec_time_change_rate": -9.589041095890416, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "946572ba-9c02-4e44-87f8-5606d34c1c4a", "time_utc": "2024-05-15T09:42:45+00:00", "status": "success", "full_refresh": false, "materialization": "incremental", "execution_time": 8.0}, {"id": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "time_utc": "2024-05-15T11:23:21+00:00", "status": "success", "full_refresh": false, "materialization": "incremental", "execution_time": 6.6}]}, {"unique_id": "model.dbt_practise.incremental_time", "schema": "JEET_DB_SCHEMA", "name": "incremental_time", "status": "success", "last_exec_time": 5.9, "median_exec_time": 7.25, "compiled_code": "\n\nselect t.*  from \"SNOWFLAKE_SAMPLE_DATA\".\"TPCDS_SF10TCL\".\"TIME_DIM\" t\nwhere to_time(concat(T_HOUR::varchar, ':', T_MINUTE, ':', T_SECOND)) <= current_time\n\n\n   and t_time>=(select max(t_time) from JEET_DB.JEET_DB_SCHEMA.incremental_time)\n", "last_generated_at": "2024-05-15T11:23:21+00:00", "exec_time_change_rate": -18.620689655172406, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "946572ba-9c02-4e44-87f8-5606d34c1c4a", "time_utc": "2024-05-15T09:42:45+00:00", "status": "success", "full_refresh": false, "materialization": "incremental", "execution_time": 8.6}, {"id": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "time_utc": "2024-05-15T11:23:21+00:00", "status": "success", "full_refresh": false, "materialization": "incremental", "execution_time": 5.9}]}, {"unique_id": "model.dbt_practise.my_first_dbt_model", "schema": "JEET_DB_SCHEMA", "name": "my_first_dbt_model", "status": "success", "last_exec_time": 2.8, "median_exec_time": 2.8, "compiled_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\nwhere id is not null\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "last_generated_at": "2024-05-15T11:30:34+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 3}, "runs": [{"id": "946572ba-9c02-4e44-87f8-5606d34c1c4a", "time_utc": "2024-05-15T09:42:45+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 4.4}, {"id": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "time_utc": "2024-05-15T11:23:21+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.7}, {"id": "15778b46-c279-4010-8a30-ff0875390e98", "time_utc": "2024-05-15T11:30:34+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.8}]}, {"unique_id": "model.dbt_practise.playing_with_tests", "schema": "JEET_DB_SCHEMA", "name": "playing_with_tests", "status": "success", "last_exec_time": 3.6, "median_exec_time": 4.15, "compiled_code": "\n\nselect * from \"SNOWFLAKE_SAMPLE_DATA\".\"TPCH_SF1\".\"CUSTOMER\"", "last_generated_at": "2024-05-15T11:23:21+00:00", "exec_time_change_rate": -13.25301204819278, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "946572ba-9c02-4e44-87f8-5606d34c1c4a", "time_utc": "2024-05-15T09:42:45+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 4.7}, {"id": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "time_utc": "2024-05-15T11:23:21+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 3.6}]}, {"unique_id": "model.dbt_practise.python_val", "schema": "JEET_DB_SCHEMA", "name": "python_val", "status": "success", "last_exec_time": 6.0, "median_exec_time": 6.6, "compiled_code": "from snowflake.snowpark import Session\nfrom snowflake.snowpark.functions import col\n\ndef model(dbt, session):\n    dbt.config(materialized='table')\n\n    df= session.table('SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.TIME_DIM')\n\n    return df\n\n# from snowflake.snowpark import Session \n# from snowflake.snowpark.functions import col\n\n\n# def model(dbt, session):\n#     # Must be either table or incremental (view is not currently supported)\n#     dbt.config(materialized = \"table\",database='DEMO_DB',schema='BRONZE')\n#     print(\"Inside Bronze_customer\")\n\n#     # DataFrame representing an upstream model\n#     df = session.table(\"snowflake_sample_data.TPCH_SF1.CUSTOMER\")\n#     return df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"JEET_DB\"\n    schema = \"JEET_DB_SCHEMA\"\n    identifier = \"python_val\"\n    \n    def __repr__(self):\n        return 'JEET_DB.JEET_DB_SCHEMA.python_val'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "last_generated_at": "2024-05-15T11:23:21+00:00", "exec_time_change_rate": -9.090909090909083, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "946572ba-9c02-4e44-87f8-5606d34c1c4a", "time_utc": "2024-05-15T09:42:45+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 7.2}, {"id": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "time_utc": "2024-05-15T11:23:21+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 6.0}]}, {"unique_id": "model.dbt_practise.my_second_dbt_model", "schema": "JEET_DB_SCHEMA", "name": "my_second_dbt_model", "status": "success", "last_exec_time": 2.1, "median_exec_time": 2.3, "compiled_code": "-- Use the `ref` function to select from other models\n\nselect *\nfrom JEET_DB.JEET_DB_SCHEMA.first_model\nwhere id = 1", "last_generated_at": "2024-05-15T11:23:21+00:00", "exec_time_change_rate": -8.695652173913038, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "946572ba-9c02-4e44-87f8-5606d34c1c4a", "time_utc": "2024-05-15T09:42:45+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 2.5}, {"id": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "time_utc": "2024-05-15T11:23:21+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 2.1}]}], "model_runs_totals": {"model.dbt_practise.dates": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.dbt_practise.incremental_time": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.dbt_practise.my_first_dbt_model": {"errors": 0, "warnings": 0, "passed": 3, "failures": 0}, "model.dbt_practise.playing_with_tests": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.dbt_practise.python_val": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.dbt_practise.my_second_dbt_model": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}}, "filters": {"test_results": [{"name": "passed", "display_name": "Passed", "model_unique_ids": ["model.dbt_practise.my_first_dbt_model", "model.dbt_practise.playing_with_tests", "test.dbt_practise.assert_totalsum", "model.dbt_practise.my_second_dbt_model"]}, {"name": "no_test", "display_name": "No Tests", "model_unique_ids": ["model.dbt_practise.incremental_time", "model.dbt_practise.python_val", "model.dbt_practise.dates"]}], "test_runs": [{"name": "passed", "display_name": "Passed", "model_unique_ids": ["model.dbt_practise.my_first_dbt_model", "model.dbt_practise.playing_with_tests", "test.dbt_practise.assert_totalsum", "model.dbt_practise.my_second_dbt_model"]}, {"name": "no_test", "display_name": "No Tests", "model_unique_ids": ["model.dbt_practise.incremental_time", "model.dbt_practise.python_val", "model.dbt_practise.dates"]}], "model_runs": [{"name": "success", "display_name": "Successful Runs", "model_unique_ids": ["model.dbt_practise.my_second_dbt_model", "model.dbt_practise.dates", "model.dbt_practise.incremental_time", "model.dbt_practise.python_val", "model.dbt_practise.playing_with_tests", "model.dbt_practise.my_first_dbt_model"]}]}, "lineage": {"nodes": [{"id": "model.dbt_practise.my_first_dbt_model", "type": "model", "sub_type": "table"}, {"id": "model.dbt_practise.playing_with_tests", "type": "model", "sub_type": "table"}, {"id": "model.dbt_practise.my_second_dbt_model", "type": "model", "sub_type": "view"}, {"id": "model.dbt_practise.dates", "type": "model", "sub_type": "table"}, {"id": "model.dbt_practise.incremental_time", "type": "model", "sub_type": "table"}, {"id": "model.dbt_practise.python_val", "type": "model", "sub_type": "table"}], "edges": [["model.dbt_practise.my_second_dbt_model", "model.dbt_practise.my_first_dbt_model"]]}, "invocations": [{"invocation_id": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "detected_at": null, "command": "run", "selected": "", "full_refresh": false, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}, {"invocation_id": "15778b46-c279-4010-8a30-ff0875390e98", "detected_at": null, "command": "run", "selected": "my_first_dbt_model", "full_refresh": false, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}], "resources_latest_invocation": {"model.elementary.alerts_dbt_source_freshness": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.schema_columns_snapshot": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.dbt_artifacts_hashes": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.dbt_run_results": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.elementary_test_results": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.monitors_runs": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.dbt_columns": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.dbt_practise.playing_with_tests": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.snapshot_run_results": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.metrics_anomaly_score": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.dbt_models": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.anomaly_threshold_sensitivity": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.dbt_snapshots": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.dbt_practise.dates": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.dbt_exposures": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.model_run_results": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.dbt_practise.incremental_time": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.metadata": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.dbt_practise.my_first_dbt_model": "15778b46-c279-4010-8a30-ff0875390e98", "model.elementary.dbt_sources": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.dbt_practise.python_val": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.test_result_rows": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.alerts_anomaly_detection": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.alerts_dbt_tests": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.dbt_metrics": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.dbt_tests": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.alerts_schema_changes": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.dbt_invocations": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.alerts_dbt_models": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.data_monitoring_metrics": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.dbt_seeds": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.dbt_source_freshness_results": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.dbt_practise.my_second_dbt_model": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9", "model.elementary.job_run_results": "74a97217-0109-4ce0-aa37-7b0f6f00cfc9"}, "invocations_job_identification": {}, "env": {"project_name": "dbt_practise", "env": "dev", "warehouse_type": "snowflake"}, "tracking": {"posthog_api_key": "phc_56XBEzZmh02mGkadqLiYW51eECyYKWPyecVwkGdGUfg", "report_generator_anonymous_user_id": "24ab9ea5-9984-4367-b496-ba5a61adf8c1", "anonymous_warehouse_id": "df9e4152fce24aab9bbcf5a8784d35ca558551695c31ebe75f8bdd77cc42bb9f"}}